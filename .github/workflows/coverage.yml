name: Test Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      # Detect project type
      - name: Detect project type
        id: detect-project
        run: |
          if [ -f "package.json" ]; then
            echo "PROJECT_TYPE=node" >> $GITHUB_ENV
          elif [ -f "requirements.txt" ] || [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
            echo "PROJECT_TYPE=python" >> $GITHUB_ENV
          elif [ -f "pom.xml" ] || [ -f "build.gradle" ]; then
            echo "PROJECT_TYPE=java" >> $GITHUB_ENV
          elif [ -f "go.mod" ]; then
            echo "PROJECT_TYPE=go" >> $GITHUB_ENV
          else
            echo "PROJECT_TYPE=unknown" >> $GITHUB_ENV
          fi
      
      # Node.js setup
      - name: Set up Node.js
        if: env.PROJECT_TYPE == 'node'
        uses: actions/setup-node@v3
        with:
          node-version: '16'
      
      - name: Install Node.js dependencies
        if: env.PROJECT_TYPE == 'node'
        run: npm ci || npm install
      
      - name: Run tests with coverage (Node.js)
        if: env.PROJECT_TYPE == 'node'
        run: |
          # Add coverage if not configured
          if ! grep -q '"test"' package.json; then
            npm set-script test "jest --coverage"
            npm install --save-dev jest
          elif ! grep -q 'coverage' package.json; then
            npm install --save-dev nyc
          fi
          npm test
      
      - name: Upload Node.js coverage to Coveralls
        if: env.PROJECT_TYPE == 'node'
        uses: coverallsapp/github-action@v2
      
      # Python setup
      - name: Set up Python
        if: env.PROJECT_TYPE == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install Python dependencies
        if: env.PROJECT_TYPE == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coveralls
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
      
      - name: Run tests with coverage (Python)
        if: env.PROJECT_TYPE == 'python'
        run: pytest --cov=./ --cov-report=xml
      
      - name: Upload Python coverage to Coveralls
        if: env.PROJECT_TYPE == 'python'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      # Java setup
      - name: Set up Java
        if: env.PROJECT_TYPE == 'java'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Run Maven tests with JaCoCo
        if: env.PROJECT_TYPE == 'java' && hashFiles('pom.xml') != ''
        run: |
          if ! grep -q "jacoco" pom.xml; then
            # Add JaCoCo plugin if not present
            mvn org.apache.maven.plugins:maven-help-plugin:3.2.0:evaluate -Dexpression=project.build.plugins -q -DforceStdout
            mvn -B com.github.ekryd.echo-maven-plugin:echo-maven-plugin:1.3.2:echo -Decho="
            <plugin>
              <groupId>org.jacoco</groupId>
              <artifactId>jacoco-maven-plugin</artifactId>
              <version>0.8.8</version>
              <executions>
                <execution>
                  <goals>
                    <goal>prepare-agent</goal>
                  </goals>
                </execution>
                <execution>
                  <id>report</id>
                  <phase>test</phase>
                  <goals>
                    <goal>report</goal>
                  </goals>
                </execution>
              </executions>
            </plugin>"
          fi
          mvn test jacoco:report
      
      - name: Run Gradle tests with JaCoCo
        if: env.PROJECT_TYPE == 'java' && hashFiles('build.gradle') != '' && hashFiles('pom.xml') == ''
        run: |
          if ! grep -q "jacoco" build.gradle; then
            # Add JaCoCo plugin if not present
            echo "apply plugin: 'jacoco'" >> build.gradle
            echo "jacocoTestReport {
              reports {
                xml.enabled true
                html.enabled true
              }
            }" >> build.gradle
          fi
          ./gradlew test jacocoTestReport
      
      - name: Upload Java coverage to Coveralls
        if: env.PROJECT_TYPE == 'java'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
      
      # Go setup
      - name: Set up Go
        if: env.PROJECT_TYPE == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20'
      
      - name: Run tests with coverage (Go)
        if: env.PROJECT_TYPE == 'go'
        run: |
          go test -race -coverprofile=coverage.txt -covermode=atomic ./...
      
      - name: Upload Go coverage to Coveralls
        if: env.PROJECT_TYPE == 'go'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          file: coverage.txt

      # Generic case if we couldn't detect the project type
      - name: Generic coverage attempt
        if: env.PROJECT_TYPE == 'unknown'
        run: |
          echo "Unable to auto-detect project type. Trying generic approach..."
          # Try to find test files
          find . -name "*test*" -type f | grep -v "node_modules" | grep -v ".git"
