name: Code Coverage

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better coverage
      
      # Detect project type and set up environment
      - name: Detect project type
        id: detect-project
        run: |
          if [ -f "package.json" ]; then
            echo "PROJECT_TYPE=node" >> $GITHUB_ENV
          elif [ -f "requirements.txt" ] || [ -f "setup.py" ]; then
            echo "PROJECT_TYPE=python" >> $GITHUB_ENV
          elif [ -f "pom.xml" ]; then
            echo "PROJECT_TYPE=java" >> $GITHUB_ENV
          elif [ -f "go.mod" ]; then
            echo "PROJECT_TYPE=go" >> $GITHUB_ENV
          else
            echo "PROJECT_TYPE=unknown" >> $GITHUB_ENV
          fi
      
      # Node.js setup
      - name: Set up Node.js
        if: env.PROJECT_TYPE == 'node'
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
      
      - name: Install Node.js dependencies
        if: env.PROJECT_TYPE == 'node'
        run: npm ci || npm install
      
      - name: Run tests with coverage (Node.js)
        if: env.PROJECT_TYPE == 'node'
        run: |
          # Add coverage to package.json if not already there
          if ! grep -q '"test"' package.json; then
            npm set-script test "jest --coverage"
            npm install --save-dev jest
          elif ! grep -q 'coverage' package.json; then
            # Try to modify existing test script to add coverage
            sed -i 's/"test": "jest"/"test": "jest --coverage"/g' package.json
            sed -i 's/"test": "mocha"/"test": "nyc mocha"/g' package.json
            # Install coverage tools
            npm install --save-dev nyc
          fi
          npm test
      
      # Python setup
      - name: Set up Python
        if: env.PROJECT_TYPE == 'python'
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
      
      - name: Install Python dependencies
        if: env.PROJECT_TYPE == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
      
      - name: Run tests with coverage (Python)
        if: env.PROJECT_TYPE == 'python'
        run: pytest --cov=./ --cov-report=xml
      
      # Java setup
      - name: Set up Java
        if: env.PROJECT_TYPE == 'java'
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
      
      - name: Run tests with coverage (Java)
        if: env.PROJECT_TYPE == 'java'
        run: mvn verify -B
      
      # Go setup
      - name: Set up Go
        if: env.PROJECT_TYPE == 'go'
        uses: actions/setup-go@v4
        with:
          go-version: '^1.20'
      
      - name: Run tests with coverage (Go)
        if: env.PROJECT_TYPE == 'go'
        run: |
          go install github.com/axw/gocov/gocov@latest
          go install github.com/AlekSi/gocov-xml@latest
          go test -coverprofile=coverage.txt -covermode=atomic ./...
          gocov convert coverage.txt | gocov-xml > coverage.xml
      
      # Upload coverage to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          # Token is not required for public repositories
          # token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
