name: CI/CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Commit checks
  # Note: We removed the daily schedule to focus on commits

# Common environment variables
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  # Super Linter to check all code
  super-linter:
    name: Super Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files
          fetch-depth: 0
          
      - name: Run Super-Linter (Fast Mode)
        uses: github/super-linter@v5
        # Added timeout to ensure it doesn't run too long
        timeout-minutes: 5
        env:
          VALIDATE_ALL_CODEBASE: false  # Only validate changed files to speed up checks
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JAVA: true
          VALIDATE_YAML: true
          VALIDATE_JSON: true
          VALIDATE_XML: true
          VALIDATE_MD: true
          VALIDATE_BASH: true

  # JavaScript/Node.js components
  node-components:
    name: Node.js Components
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Find and process all package.json files
      # Added timeout to prevent excessive build time
      timeout-minutes: 10
      run: |
        # Find all package.json files, excluding those in node_modules
        find . -name "package.json" -not -path "*/node_modules/*" | while read -r package; do
          dir=$(dirname "$package")
          echo "Processing Node.js project in $dir"
          cd "$GITHUB_WORKSPACE/$dir"
          
          # Check if this is not a dependency package (has scripts section)
          if grep -q '"scripts"' package.json; then
            echo "Installing dependencies..."
            npm ci || npm install
            
            # Run lint if the script exists
            if grep -q '"lint"' package.json; then
              echo "Running lint..."
              npm run lint || echo "Linting completed with warnings"
            fi
            
            # Run tests if the script exists
            if grep -q '"test"' package.json; then
              echo "Running tests..."
              npm test || echo "Tests completed with warnings"
            fi
            
            # Run build if the script exists
            if grep -q '"build"' package.json; then
              echo "Building..."
              npm run build || echo "Build completed with warnings"
            fi
          else
            echo "Skipping as appears to be a dependency package without scripts"
          fi
        done
      continue-on-error: true

  # Java/Maven components
  java-components:
    name: Java Components
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build and Test with Maven
      # Added timeout to ensure it doesn't run too long
      timeout-minutes: 15
      run: |
        # Find all pom.xml files and run Maven on them with optimizations
        find . -name "pom.xml" -not -path "*/target/*" -not -path "*/node_modules/*" | while read -r pom; do
          dir=$(dirname "$pom")
          echo "Building Maven project in $dir"
          cd "$GITHUB_WORKSPACE/$dir"
          # Using -T for parallel builds, skipping javadoc and avoiding full clean to speed up
          mvn verify -B -T 1C -DskipJavadoc=true || echo "Maven build completed with warnings"
        done
      continue-on-error: true

  # General artifact collection
  collect-artifacts:
    name: Collect Build Artifacts
    runs-on: ubuntu-latest
    needs: [node-components, java-components]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Create artifact directory
      run: mkdir -p build-artifacts
    
    - name: Collect Node.js artifacts
      run: |
        # Find all potential build directories from Node.js projects
        find . -name "package.json" -not -path "*/node_modules/*" | while read -r package; do
          dir=$(dirname "$package")
          component=$(basename "$dir")
          parent_dir=$(basename "$(dirname "$dir")")
          
          # Handle different build directory patterns
          # dist directory (common for Node.js apps)
          if [ -d "$dir/dist" ]; then
            echo "Found dist build for $component in $dir"
            mkdir -p "build-artifacts/node/$parent_dir-$component"
            cp -r "$dir/dist"/* "build-artifacts/node/$parent_dir-$component/" || true
          fi
          
          # build directory (common for React apps)
          if [ -d "$dir/build" ]; then
            echo "Found build directory for $component in $dir"
            mkdir -p "build-artifacts/node/$parent_dir-$component"
            cp -r "$dir/build"/* "build-artifacts/node/$parent_dir-$component/" || true
          fi
          
          # public directory (sometimes used for static files)
          if [ -d "$dir/public" ]; then
            echo "Found public directory for $component in $dir"
            mkdir -p "build-artifacts/node/$parent_dir-$component-public"
            cp -r "$dir/public"/* "build-artifacts/node/$parent_dir-$component-public/" || true
          fi
          
          # out directory (Next.js)
          if [ -d "$dir/out" ]; then
            echo "Found out directory for $component in $dir"
            mkdir -p "build-artifacts/node/$parent_dir-$component"
            cp -r "$dir/out"/* "build-artifacts/node/$parent_dir-$component/" || true
          fi
        done
      continue-on-error: true
    
    - name: Collect Java artifacts
      run: |
        # Find all target directories with JARs and copy them
        find . -name "*.jar" -not -path "*/node_modules/*" -path "*/target/*" | while read -r jar; do
          dir=$(dirname "$jar")
          component=$(echo "$dir" | sed 's/.*\/target//' | sed 's/^\///')
          if [ -z "$component" ]; then
            component=$(basename $(dirname $(dirname "$jar")))
          fi
          mkdir -p build-artifacts/java/$component
          cp "$jar" build-artifacts/java/$component/
        done
      continue-on-error: true
    
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build-artifacts
  
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: collect-artifacts
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build-artifacts
        
    - name: Deploy Services
      run: |
        echo "Deploying to production environment"
        # Add your deployment commands here
        # Examples:
        # 
        # Deploy Node.js applications
        # - aws s3 sync build-artifacts/ui s3://your-bucket-name/ (for UI)
        # - scp -r build-artifacts/api/* user@your-server:/path/to/api/ (for API)
        # 
        # Deploy Java applications
        # - scp build-artifacts/java/your-service/*.jar user@your-server:/path/to/service/
        # 
        # Restart services
        # - ssh user@your-server "systemctl restart your-service"
      
    - name: Notify deployment status
      run: |
        echo "Deployment completed"
        # Add notification commands (Slack, Email, etc.)